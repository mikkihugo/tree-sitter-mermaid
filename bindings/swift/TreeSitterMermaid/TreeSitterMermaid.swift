import TreeSitter

/// Tree-sitter language support for Mermaid diagrams
///
/// This class provides Swift bindings for parsing Mermaid diagram syntax
/// using the tree-sitter parsing library. Mermaid is a JavaScript-based
/// diagramming and charting tool that uses markdown-inspired syntax.
///
/// # Supported Diagram Types (23 Total)
///
/// **Fully Implemented with Comprehensive Parsing:**
/// - Flowcharts/Graphs (TD, LR, RL, BT directions)
/// - Sequence Diagrams
/// - Class Diagrams
/// - State Diagrams
/// - Entity Relationship (ER) Diagrams
/// - Gantt Charts
/// - Git Graphs
/// - Pie Charts
/// - Mind Maps
/// - User Journey
///
/// **Partially Implemented (Skeleton + Structure):**
/// - Quadrant Charts, XY Charts, Timelines, ZenUML, Sankey
/// - Block Diagrams, Packet Diagrams, Kanban, Architecture
/// - Radar Charts, Treemaps, C4 Diagrams, Requirement Diagrams
///
/// # Usage
///
/// ```swift
/// import TreeSitter
/// import TreeSitterMermaid
///
/// // Create a parser and set the Mermaid language
/// let parser = Parser()
/// parser.setLanguage(TreeSitterMermaid.language)
///
/// // Parse a Mermaid diagram
/// let code = """
/// graph TD
///     A[Start] --> B{Decision}
///     B -->|Yes| C[Process]
///     B -->|No| D[Skip]
/// """
///
/// let tree = parser.parse(code)
///
/// // Access the parse tree
/// if let rootNode = tree?.rootNode {
///     print("Root: \(rootNode)")
/// }
/// ```
///
/// # Language Features
///
/// - **Case-insensitive keywords**: `graph`, `Graph`, `GRAPH` all valid
/// - **Inline comments**: `%% comment` syntax supported
/// - **Multiline strings**: Supported in node/task content
/// - **Nested structures**: Subgraphs, class definitions, etc.
/// - **Context-aware parsing**: External scanner handles 'o' token in class aggregation
///
/// # Related Documentation
///
/// - [Mermaid Syntax Documentation](https://mermaid.js.org/)
/// - [Tree-sitter Documentation](https://tree-sitter.github.io/tree-sitter/)
/// - [Swift Tree-sitter Bindings](https://github.com/tree-sitter/swift-tree-sitter)
///
public class TreeSitterMermaid {
    /// The tree-sitter Language object for parsing Mermaid diagrams
    ///
    /// This is a pre-instantiated Language object that has been initialized
    /// with the Mermaid grammar. It should be set on a Parser instance using
    /// `parser.setLanguage(_:)` before parsing Mermaid code.
    ///
    /// # Example
    /// ```swift
    /// let parser = Parser()
    /// parser.setLanguage(TreeSitterMermaid.language)
    /// ```
    public static let language = Language(language: tree_sitter_mermaid())
}

/// C function declaration for the tree-sitter language
///
/// This function is automatically generated by tree-sitter from the grammar.js
/// file. It returns an opaque pointer to the language definition, which is then
/// wrapped in a Language object for use with Swift/Tree-sitter.
///
/// - Returns: Opaque pointer to the tree-sitter Language object for Mermaid
/// - Note: This is a C function and should not be called directly from Swift
///         Use `TreeSitterMermaid.language` instead
func tree_sitter_mermaid() -> OpaquePointer!
